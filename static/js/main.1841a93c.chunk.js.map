{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","publicPath","process","useState","audioSrc","setAudioSrc","loop","_handleAction","actionName","actionStateManager","audioElement","document","getElementById","play","pause","load","console","log","useEffect","className","id","src","type","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1841a93c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.scss';\n\nfunction App() {\n  const publicPath = process.env.PUBLIC_URL + '/sounds/'\n  const [audioSrc, setAudioSrc] = useState(publicPath + 'cacerolazo.mp3')\n\n  // Default loop attribute is false.\n  let loop = false\n\n  // When audioSrc changes, we send that event to our state machine.\n  useEffect(() => actionStateManager('sound-changed'))\n\n  function _handleAction(actionName) {\n    actionStateManager(actionName)\n  }\n\n  function actionStateManager (actionName) {\n    const audioElement = document.getElementById('audio')\n\n    switch (actionName) {\n      case 'play':\n        // Play audio.\n        audioElement.play()\n        return\n      case 'pause':\n        // Pause audio.\n        audioElement.pause()\n        return\n      case 'repeat':\n        // Repeaat means reload audio and play again.\n        audioElement.load()\n        audioElement.play()\n        return\n      case 'loop':\n        // Loop switcher.\n        console.log(!!loop)\n        loop = !loop\n        audioElement.loop = !!loop\n        return\n      case 'sound-changed':\n        // Sound changes means pause, reload source, and play.\n        audioElement.pause()\n        audioElement.load()\n        audioElement.play()\n        return\n      default:\n        // By default, pause audio.\n        audioElement.pause()\n        break\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {audioSrc}\n      <audio id=\"audio\">\n        <source src={audioSrc} type=\"audio/mpeg\" />\n      </audio>\n      <div className=\"content-container\">\n        <div className=\"content-actions\">\n          <button className=\"action\" onClick={() => _handleAction('play')}>PLAY</button>\n          <button className=\"action\" onClick={() => _handleAction('pause')}>PAUSAR</button>\n          <button className=\"action\" onClick={() => _handleAction('repeat')}>REPETIR</button>\n          <button className=\"action\" onClick={() => _handleAction('loop')}>LOOPEAR</button>\n        </div>\n      </div>\n      <div className=\"footer\">\n        <div className=\"sound\" onClick={() => setAudioSrc(publicPath + 'cacerolazo.mp3')}>\n          Cacerolazo\n        </div>\n        <div className=\"sound\" onClick={() => setAudioSrc(publicPath + 'hablasviejo.mp3')}>\n          De qu√© me hablas viejo\n        </div>\n        <div className=\"sound\" onClick={() => setAudioSrc(publicPath + 'estudien.mp3')}>\n          Estudien vagos\n        </div>\n        <div className=\"sound\" onClick={() => setAudioSrc(publicPath + 'cara.mp3')}>\n          Le voy a dar en la cara marica\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}